
Logout 
Google+playStore+Apps (2) (autosaved) 
 

Python 3  


File
Edit
View
Insert
Cell
Kernel
Widgets
Help












CellToolbar


Exploratory Data Analysis of Google PlayStore Apps

We are going to analyse the dataset(taken from Kaggle) of all the Apps in Google Play store

1.Importing the required packages.
In [1]:


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
%matplotlib inline
​
#To hide Warning messages.
import warnings
warnings.filterwarnings('ignore')



2. Reading the data.
In [2]:


df = pd.read_csv("googleplaystore.csv")
df.head()


Out[2]:

App
Category
Rating
Reviews
Size
Installs
Type
Price
Content Rating
Genres
Last Updated
Current Ver
Android Ver
0
Photo Editor & Candy Camera & Grid & ScrapBook
ART_AND_DESIGN
4.1
159
19M
10,000+
Free
0
Everyone
Art & Design
January 7, 2018
1.0.0
4.0.3 and up
1
Coloring book moana
ART_AND_DESIGN
3.9
967
14M
500,000+
Free
0
Everyone
Art & Design;Pretend Play
January 15, 2018
2.0.0
4.0.3 and up
2
U Launcher Lite – FREE Live Cool Themes, Hide ...
ART_AND_DESIGN
4.7
87510
8.7M
5,000,000+
Free
0
Everyone
Art & Design
August 1, 2018
1.2.4
4.0.3 and up
3
Sketch - Draw & Paint
ART_AND_DESIGN
4.5
215644
25M
50,000,000+
Free
0
Teen
Art & Design
June 8, 2018
Varies with device
4.2 and up
4
Pixel Draw - Number Art Coloring Book
ART_AND_DESIGN
4.3
967
2.8M
100,000+
Free
0
Everyone
Art & Design;Creativity
June 20, 2018
1.1
4.4 and up

3.Data Preprocessing



3.1 Handling Null Values

In [3]:


print(df.isnull().sum())
​
df.dropna(inplace=True) #Dropping Rows with Null values



App                  0
Category             0
Rating            1474
Reviews              0
Size                 0
Installs             0
Type                 1
Price                0
Content Rating       1
Genres               0
Last Updated         0
Current Ver          8
Android Ver          3
dtype: int64

There are many Null values in Rating ,Content Rating,current Ver,Android Ver

Removing Duplicate Entries
In [4]:


df.drop_duplicates(inplace=True)


In [5]:


df.shape


Out[5]:
(8886, 13)

After removing the rows with null values and duplicate entries.We have got 8886 apps to analyse for their rating and performance.



3.2 Handling Data types of each feature


The Data Types of each feature
In [6]:


df.dtypes  # Displaying Data types of each feature.


Out[6]:
App                object
Category           object
Rating            float64
Reviews            object
Size               object
Installs           object
Type               object
Price              object
Content Rating     object
Genres             object
Last Updated       object
Current Ver        object
Android Ver        object
dtype: object

The features Reviews must be numerical types so we would change it
In [7]:


df.Reviews = df.Reviews.astype('int64') #Changing to int type.



Other feature like Size,Installs,Price and Android ver also must be of numeric type

Changing the Feautre- Installs
In [8]:


newInstalls = []
​
for row in df.Installs:
    
    row = row[:-1]
    newRow = row.replace(",", "")
    newInstalls.append(float(newRow))
    
​
df.Installs = newInstalls
​
df.Installs.head()


Out[8]:
0       10000.0
1      500000.0
2     5000000.0
3    50000000.0
4      100000.0
Name: Installs, dtype: float64

Changing the feature -Size
In [9]:


newSize = []
​
for row in df.Size:
    newrow = row[:-1]
    try:
        newSize.append(float(newrow))
    except:
        newSize.append(0) #When it says - Size Varies.
    
df.Size = newSize
​
df.Size.head()


Out[9]:
0    19.0
1    14.0
2     8.7
3    25.0
4     2.8
Name: Size, dtype: float64

Changing the feature -Price
In [10]:


newPrice = []
​
for row in df.Price:
    if row!= "0":
        newrow = float(row[1:])
    else:
        newrow = 0 
        
    newPrice.append(newrow)
        
df.Price = newPrice
​
df.Price.head()


Out[10]:
0    0.0
1    0.0
2    0.0
3    0.0
4    0.0
Name: Price, dtype: float64

Changing the feature- Android version
In [11]:


newVer = []
​
for row in df['Android Ver']:
    try:
        newrow = float(row[:2])
    except:
        newrow = 0  # When the value is - Varies with device
    
    newVer.append(newrow)
    
df['Android Ver'] =  newVer
​
df['Android Ver'].value_counts()


Out[11]:
4.0    5602
0.0    1178
2.0    1160
5.0     500
3.0     246
1.0     104
6.0      46
7.0      45
8.0       5
Name: Android Ver, dtype: int64

4.Analysing features:

4.1 Categories
In [12]:


df.Category.value_counts()


Out[12]:
FAMILY                 1717
GAME                   1074
TOOLS                   733
PRODUCTIVITY            334
FINANCE                 317
PERSONALIZATION         308
COMMUNICATION           307
LIFESTYLE               305
PHOTOGRAPHY             304
MEDICAL                 302
SPORTS                  286
BUSINESS                270
HEALTH_AND_FITNESS      262
SOCIAL                  244
NEWS_AND_MAGAZINES      214
TRAVEL_AND_LOCAL        205
SHOPPING                202
BOOKS_AND_REFERENCE     177
VIDEO_PLAYERS           160
DATING                  159
EDUCATION               129
MAPS_AND_NAVIGATION     124
ENTERTAINMENT           111
FOOD_AND_DRINK          106
WEATHER                  75
AUTO_AND_VEHICLES        73
HOUSE_AND_HOME           68
LIBRARIES_AND_DEMO       64
ART_AND_DESIGN           61
COMICS                   58
PARENTING                50
EVENTS                   45
BEAUTY                   42
Name: Category, dtype: int64
In [13]:


df.Category.value_counts().plot(kind='bar',figsize= (12,8))


Out[13]:
<matplotlib.axes._subplots.AxesSubplot at 0x1d3b6007390>



4.2 rating
In [14]:


df.Rating.describe()


Out[14]:
count    8886.000000
mean        4.187959
std         0.522428
min         1.000000
25%         4.000000
50%         4.300000
75%         4.500000
max         5.000000
Name: Rating, dtype: float64
In [15]:


sns.distplot(df.Rating)


Out[15]:
<matplotlib.axes._subplots.AxesSubplot at 0x1d3b9ff7358>


In [16]:


print("No. of Apps with full ratings: ",df.Rating[df['Rating'] == 5 ].count())



No. of Apps with full ratings:  271

4.3 Consider The Reviews
In [17]:


plt.figure(figsize=(8,5))
sns.distplot(df.Reviews)


Out[17]:
<matplotlib.axes._subplots.AxesSubplot at 0x1d3ba1d05f8>


In [18]:


df[df.Reviews>50000000]


Out[18]:

App
Category
Rating
Reviews
Size
Installs
Type
Price
Content Rating
Genres
Last Updated
Current Ver
Android Ver
335
Messenger – Text and Video Chat for Free
COMMUNICATION
4.0
56642847
0.0
1.000000e+09
Free
0.0
Everyone
Communication
August 1, 2018
Varies with device
0.0
336
WhatsApp Messenger
COMMUNICATION
4.4
69119316
0.0
1.000000e+09
Free
0.0
Everyone
Communication
August 3, 2018
Varies with device
0.0
382
Messenger – Text and Video Chat for Free
COMMUNICATION
4.0
56646578
0.0
1.000000e+09
Free
0.0
Everyone
Communication
August 1, 2018
Varies with device
0.0
2544
Facebook
SOCIAL
4.1
78158306
0.0
1.000000e+09
Free
0.0
Teen
Social
August 3, 2018
Varies with device
0.0
2545
Instagram
SOCIAL
4.5
66577313
0.0
1.000000e+09
Free
0.0
Teen
Social
July 31, 2018
Varies with device
0.0
2604
Instagram
SOCIAL
4.5
66577446
0.0
1.000000e+09
Free
0.0
Teen
Social
July 31, 2018
Varies with device
0.0
3904
WhatsApp Messenger
COMMUNICATION
4.4
69109672
0.0
1.000000e+09
Free
0.0
Everyone
Communication
August 3, 2018
Varies with device
0.0
3909
Instagram
SOCIAL
4.5
66509917
0.0
1.000000e+09
Free
0.0
Teen
Social
July 31, 2018
Varies with device
0.0
3943
Facebook
SOCIAL
4.1
78128208
0.0
1.000000e+09
Free
0.0
Teen
Social
August 3, 2018
Varies with device
0.0

4.4 Type:
In [19]:


plt.pie(df.Type.value_counts(), labels=['Free', 'Paid'], autopct='%1.1f%%')


Out[19]:
([<matplotlib.patches.Wedge at 0x1d3ba45def0>,
  <matplotlib.patches.Wedge at 0x1d3ba46f128>],
 [<matplotlib.text.Text at 0x1d3ba4666a0>,
  <matplotlib.text.Text at 0x1d3ba46f898>],
 [<matplotlib.text.Text at 0x1d3ba466b70>,
  <matplotlib.text.Text at 0x1d3ba46fd68>])



4.5 Price
In [20]:


df[df.Price == df.Price.max()]


Out[20]:

App
Category
Rating
Reviews
Size
Installs
Type
Price
Content Rating
Genres
Last Updated
Current Ver
Android Ver
4367
I'm Rich - Trump Edition
LIFESTYLE
3.6
275
7.3
10000.0
Paid
400.0
Everyone
Lifestyle
May 3, 2018
1.0.1
4.0
In [22]:


# Count plot of various versions



4.6 Andriod version
In [23]:


df['Android Ver'].value_counts()


Out[23]:
4.0    5602
0.0    1178
2.0    1160
5.0     500
3.0     246
1.0     104
6.0      46
7.0      45
8.0       5
Name: Android Ver, dtype: int64
In [25]:


sns.countplot(df['Android Ver'])


Out[25]:
<matplotlib.axes._subplots.AxesSubplot at 0x1d3ba47e908>



5 Furthur analysis
In [26]:


# Looking of the apps with 5.0 rating:


In [27]:


df_full = df[df.Rating == 5]
​
df_full.head()


Out[27]:

App
Category
Rating
Reviews
Size
Installs
Type
Price
Content Rating
Genres
Last Updated
Current Ver
Android Ver
329
Hojiboy Tojiboyev Life Hacks
COMICS
5.0
15
37.0
1000.0
Free
0.0
Everyone
Comics
June 26, 2018
2.0
4.0
612
American Girls Mobile Numbers
DATING
5.0
5
4.4
1000.0
Free
0.0
Mature 17+
Dating
July 17, 2018
3.0
4.0
615
Awake Dating
DATING
5.0
2
70.0
100.0
Free
0.0
Mature 17+
Dating
July 24, 2018
2.2.9
4.0
633
Spine- The dating app
DATING
5.0
5
9.3
500.0
Free
0.0
Teen
Dating
July 14, 2018
4.0
4.0
636
Girls Live Talk - Free Text and Video Chat
DATING
5.0
6
5.0
100.0
Free
0.0
Mature 17+
Dating
August 1, 2018
8.2
4.0
In [28]:


# Distribution plot of 'Installs' of Apps with 5.0 Ratings


In [29]:


sns.distplot(df_full.Installs)


Out[29]:
<matplotlib.axes._subplots.AxesSubplot at 0x1d3ba49a8d0>


In [30]:


df_full.Installs.value_counts().sort_index()


Out[30]:
1.0          3
5.0          8
10.0        48
50.0        32
100.0      112
500.0       27
1000.0      37
5000.0       3
10000.0      1
Name: Installs, dtype: int64
In [31]:


# Consider the Apps with 5.0 Ratings and Maximum Installs :


In [32]:


df_full_maxinstalls = df_full[df.Installs > 1000]
​
df_full_maxinstalls[['App', 'Category', 'Installs']]


Out[32]:

App
Category
Installs
7514
CL Keyboard - Myanmar Keyboard (No Ads)
TOOLS
5000.0
8058
Oración CX
LIFESTYLE
5000.0
8260
Superheroes, Marvel, DC, Comics, TV, Movies News
COMICS
5000.0
9511
Ek Bander Ne Kholi Dukan
FAMILY
10000.0
In [33]:


# Checking the No. of Reviews of 5.0 Rating Apps


In [34]:


sns.distplot(df_full.Reviews)


Out[34]:
<matplotlib.axes._subplots.AxesSubplot at 0x1d3bb846128>


In [35]:


df_full = df_full[df.Reviews > 30]


In [36]:


print("No. of Apps having 5.0 Rating with sufficient Reviews: ",df_full.App.count())



No. of Apps having 5.0 Rating with sufficient Reviews:  16
In [37]:


plt.figure(figsize=(8,5))
sns.countplot(df_full.Genres)


Out[37]:
<matplotlib.axes._subplots.AxesSubplot at 0x1d3bb9d9978>


In [38]:


sns.countplot(df_full.Price)


Out[38]:
<matplotlib.axes._subplots.AxesSubplot at 0x1d3bba62ac8>


In [ ]:


​


